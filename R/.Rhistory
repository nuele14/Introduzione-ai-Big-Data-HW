demo()
demo()
demo.image()
demo().image
print(x)
print(x)
x = "Ciao Mondo"
x = "Ciao Mondo" #i nomi delle variabili sono case sensitive
#i nomi delle variabili sono case sensitive  #i nomi delle variabili sono case sensitive
x = "Ciao Mondo"
print(x)
#alcuni utilizzano questa operazione come =
x <- "Bezza Zi" #che non è propriamente la stessa cosa, ma nel 99% dei casi sì
print(x)
#i nomi delle variabili sono case sensitive  #i nomi delle variabili sono case sensitive
x = "Ciao Mondo"
print(x)
#alcuni utilizzano questa operazione come =
x <- "Bezza Zi" #che non è propriamente la stessa cosa, ma nel 99% dei casi sì
print(x)
charV = c("a","b")
intV =1:10
numV=vector("numeric",length = 2)
m=matrix(1:6,nrow = 2,ncol = 3)
lst ) list(seq = 1:3, num = 4, chr=c("Five","Six"))
lst = list(seq = 1:3, num = 4, chr=c("Five","Six"))
df = data.frame(x=1:3, y = c(T,T,F))
View(df)
x= 1:4
y = 4:1
x > y
x+y
y = 1:2
x+y
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
install.packages("ggplot2")
library(caret)
install.packages("pkgconfig")
library(caret)
install.packages("generics")
library(caret)
install.packages("generics gower")
install.packages("gower")
library(caret)
install.packages("hardhat")
library(caret)
install.packages("timechange")
library(caret)
install.packages("ModelMetrics")
library(caret)
featurePlot(x = iris[, 1:3], y = iris$Species, plot = "paris", pch = 16, auto.key = list(columns = 3)
x =1:3; y=11:13;
cbind(x,y) #per colonne
rbind(x,y) #per righe
x = c("a","b","c","c","a")
x[1]
x[2:3]
x[2:4]
x[x > "a"]
m = matrix (1:6, nrow=2, ncol=3)
source("~/Documents/Dev/RStudio/Esercizi Base/01-02-PrimiPassi.R", echo=TRUE)
m
m[,1]
m[2,]
lst = list(seq=1:3, num=4, chr=c("Five","Six"))
lst[1]
lst$seq
lst[[1]]
df = data.frame(seq=1:3, chr=c("Four","Five","Six"))
df[1]
df[[1]]
is.na(x)
is.nan(x)
bad.x = is.na(df$x)
df[!bad.x,]
cc = complete.cases(df);
df[cc,]
df
df = data.frame(x=c(1,NA,3), y=c(NA,T,F));
df
bad.x = is.na(df$x)
df[!bad.x,]
View(df)
cc = complete.cases(df);
df[cc,]
cc
Input = "aaa,bbb-bbb,aaa-aaa,ccc";
lines = strsplit(Input, '-');
line = unlist(lines)
Input = "aaa,bbb-bbb,aaa-aaa,ccc";
lines = strsplit(Input, '-');
line = unlist(lines)
View(lines)
lines
View(lines)
lines[[1]]
test1 = c(“1,2”, “3,4”, “5,6”)
test1 = c("1,2", "3,4", "5,6")
tf=tempfile()
writeLines(test1, tf)
writeLines(test1, tf)
Write.table(test1)
Write.table()
write.table()
df = data.frame(seq=1:3, chr=c("Four","Five","Six"))
save(df)
save(df,'temp')
save(df,'temp.txt')
save(df,file = 'temp.txt')
load(file = 'temp.txt')
system("bin/hadoop fs -rmr wordcount/out")
system("bin/hadoop fs -rmr wordcount/out")
install.packages(rhdfs)
install.packages("./rmr2_3.3.1.tar.gz", repos=NULL, type = "source")
install.packages("rmr2_3.3.1.tar.gz", repos=NULL, type = "source")
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("rhbase")
install.packages("rhdfs")
install.packages("thriftr")
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
echo $PKG_CONFIG_PATH
PKG_CONFIG_PATH
install.packages("rhdfs")
install.packages("~/Downloads/rmr2_3.3.1.tar.gz", repos = NULL, type = "source")
install.packages(c("functional", "caTools"))
install.packages("rhdfs")
install.packages("rmr2")
install.packages("~/Downloads/rmr2_3.3.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/ravro_1.0.4.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/plyrmr_0.6.0.tar.gz", repos = NULL, type = "source")
install.packages("lazyeval")
install.packages("~/Downloads/plyrmr_0.6.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/rhdfs_1.0.8.tar.gz", repos = NULL, type = "source")
Sys.setenv("HADOOP_CMD"="~/hadoop")
install.packages("~/Downloads/rhdfs_1.0.8.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("thriftr")
install.packages("~/Downloads/thriftr_1.1.7.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/plyrmr_0.6.0.tar.gz", repos = NULL, type = "source")
install.packages("backports")
install.packages("~/Downloads/backports_1.4.1.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/plyrmr_0.6.0.tar.gz", repos = NULL, type = "source")
includedir=/Library/Frameworks/R.framework/Versions/4.2/Resources/library/thriftr
includedir="/Library/Frameworks/R.framework/Versions/4.2/Resources/library/thriftr"
pkg-config --cflags thrift
install.packages("pkgconfig")
install.packages("~/Downloads/pkgconfig_2.0.3.tgz", repos = NULL, type = .Platform$pkgType)
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
pkg-config --cflags thrift
install.packages(c("apollo", "av", "BiocManager", "bookdown", "boot", "brms", "broom.helpers", "bslib", "cgam", "chromote", "class", "codetools", "cpp11", "curl", "doBy", "effectsize", "EGAnet", "epiR", "FDboost", "flexdashboard", "foreign", "FrF2", "future.callr", "gert", "ggplot2", "ggstats", "gifski", "gss", "h2o", "htmltools", "httr", "igraph", "keras", "KernSmooth", "kit", "ks", "lattice", "LogicReg", "magick", "marginaleffects", "MASS", "Matrix", "mgcv", "mirt", "modeldata", "nlme", "nnet", "nonnest2", "optimx", "osmdata", "patchwork", "promises", "purrr", "randomizr", "rbibutils", "RcppArmadillo", "readODS", "recipes", "renv", "reticulate", "rmarkdown", "rmcorr", "Rmpfr", "scico", "sfsmisc", "shiny", "sirt", "sommer", "spatial", "stars", "survival", "tensorflow", "thematic", "themis", "tinytex", "TMB", "units", "uuid", "wdm", "webshot2", "xfun"))
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
library(rmr2)
## map function
map <- function(k,lines) {
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
keyval(words, 1)
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) { mapreduce(input=input, output=output, input.format="text", map=map, reduce=reduce)
}
help("hadoop.settings")
install.packages(c("rJava", "Rcpp", "RJSONIO", "bitops", "digest",
"functional", "stringr", "plyr", "reshape2", "dplyr",
"R.methodsS3", "caTools", "Hmisc"))
libPaths()
.libPaths()
system.file(package="functional")
install.packages("data.table")
install.packages("~/Downloads/rhbase_1.2.1.tar.gz", repos = NULL, type = "source")
ls
system("bin/hadoop fs -rmr wordcount/out")
system("hadoop/bin/hadoop fs -rmr wordcount/out")
system("hadoop/bin/hadoop fs -rmr wordcount/out")
system("hadoop/bin/hadoop fs -rm -r wordcount/out")
system("hadoop/bin/hadoop fs -rm -r $HDFS_DIR/wordcount/out")
library(rmr2)
## map function
map <- function(k,lines) {
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
keyval(words, 1)
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) { mapreduce(input=input, output=output, input.format="text", map=map, reduce=reduce)
}
hdfs.root <- 'wordcount'
hdfs.data <- file.path(hdfs.root, 'data')
hdfs.out <- file.path(hdfs.root, 'out')
out <- wordcount(hdfs.data, hdfs.out)
Sys.setenv("HADOOP_PREFIX"="/Users/emanuelecoltro/hadoop")
Sys.setenv("HADOOP_CMD"="/Users/emanuelecoltro/hadoop/bin/hadoop")
Sys.setenv("HADOOP_STREAMING"="/Users/emanuelecoltro/hadoop/share/hadoop/tools/lib/hadoop-streaming-3.3.6.jar")
out <- wordcount(hdfs.data, hdfs.out)
out <- wordcount(hdfs.data, hdfs.out)
Sys.setenv("HADOOP_HOME"="/Users/emanuelecoltro/hadoop")
Sys.setenv("HADOOP_CMD"="/Users/emanuelecoltro/hadoop/bin/hadoop")
Sys.setenv("HADOOP_STREAMING"="/Users/emanuelecoltro/hadoop/share/hadoop/tools/lib/hadoop-streaming-3.3.6.jar")
out <- wordcount(hdfs.data, hdfs.out)
library(rhdfs)
hdfs.init()
install.packages("rJava")
library(rhdfs)
hdfs.init()
hdfs.ls("/")
hdfs.ls("/wordcount")
hdfs.ls("/wordcount/data")
library(rmr2)
## map function
map <- function(k,lines) {
words.list <- strsplit(lines, '\\s')
words <- unlist(words.list)
keyval(words, 1)
}
## reduce function
reduce <- function(word, counts) {
keyval(word, sum(counts))
}
wordcount <- function (input, output=NULL) { mapreduce(input=input, output=output, input.format="text", map=map, reduce=reduce)
}
hdfs.root <- 'wordcount'
hdfs.data <- file.path(hdfs.root, 'data')
hdfs.out <- file.path(hdfs.root, 'out')
out <- wordcount(hdfs.data, hdfs.out)
out <- wordcount(hdfs.data, hdfs.out)
install.packages("gtable")
# Ottieni il percorso del file di script corrente
path_attuale <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(path_attuale)
library(lubridate)
library(dplyr)
#leggo i dati del file
nomeFile="Ordini.csv"
df=read.csv(nomeFile, sep= ",", header= FALSE)
#Aggiungi l’header al dataframe
colnames(df) <- c("tipo","data","costo")
summary(df)
table(df$tipo)
documenti_vendita <- subset(df, tipo=="FATTURA" | tipo=="RICEVUTA")
# getting all the dates in format "YYYYMM"
mesi <- substring(documenti_vendita$data, 1, 6)
#JOB 1
media_mesi <- aggregate(documenti_vendita$costo, by = list(mesi), FUN = mean)
colnames(media_mesi) <- c("data","vendite_medie")
nomi_mesi <- c("Gen", "Feb", "Mar", "Apr", "Mag", "Giu",
"Lug", "Ago", "Set", "Ott", "Nov", "Dic")
media_mesi <- media_mesi %>%
mutate(mese = substring(media_mesi$data, 5, 6))
media_mesi$anno <- substr(media_mesi$data, 1, 4)
media_mesi <- media_mesi %>%
mutate(mese_testuale = nomi_mesi[as.numeric(mese)])
media_mesi <- media_mesi %>%
mutate(data_formattata = paste(anno, mese_testuale, sep = "-"))
media_mesi <- media_mesi %>%
select(data ,vendite_medie, data_formattata)
#JOB 2
varianza_mesi = aggregate(documenti_vendita$costo, by = list(mesi), FUN = var)
#JOB3
somma_mesi = aggregate(documenti_vendita$costo, by = list(mesi), FUN = sum)
colnames(somma_mesi) <- c("data","vendite_totali")
somma_mesi$anno <- substr(somma_mesi$data, 1, 4)
anni <- somma_mesi$anno
mesi_max_importo = aggregate(somma_mesi$vendite_totali, by =list(anni), FUN=max)
colnames(mesi_max_importo) <- c("anno_di_riferimento","vendite_totali")
mesi_max = merge(mesi_max_importo, somma_mesi, by="vendite_totali")
#JOB 4
mesi_min_importoonly = aggregate(somma_mesi$vendite_totali, by =list(anni), FUN=min)
colnames(mesi_min_importoonly) <- c("anno_di_riferimento","vendite_totali")
mesi_min = merge(mesi_min_importoonly, somma_mesi, by="vendite_totali")
library(ggplot2)
ggplot(media_mesi, aes(x = data, y = vendite_medie)) + geom_bar(stat = "identity", fill = "steelblue", position = position_dodge(width = 0.8)) + ggtitle("Medie per Mese")
ggplot(media_mesi, aes(x = data, y = vendite_medie)) + geom_bar(stat = "identity", fill = "blue", position = position_dodge(width = 0.8)) + ggtitle("Medie per Mese")
+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(media_mesi, aes(x = data, y = vendite_medie)) + geom_bar(stat = "identity", fill = "blue", position = position_dodge(width = 0.8)) + ggtitle("Medie per Mese") +theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(media_mesi, aes(x = data_formattata, y = vendite_medie)) + geom_line() + geom_point() + ggtitle("Medie per Mese") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(media_mesi, aes(x = data_formattata, y = vendite_medie, group = 1)) + geom_line() + geom_point() + ggtitle("Medie per Mese") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(media_mesi, aes(x = data_formattata, y = vendite_medie, group = 1)) + geom_line() + geom_point() + ggtitle("Medie per Mese") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(x = "Date", y = " Importo medio")
View(varianza_mesi)
colnames(varianza_mesi) <- c("data","varianza")
varianza_mesi$anno <- substr(varianza_mesi$data, 1, 4)
varianza_mesi$mese <- substr(varianza_mesi$data, 5, 6)
varianza_mesi <- varianza_mesi %>%
mutate(mese_testuale = nomi_mesi[as.numeric(mese)])
varianza_mesi <- varianza_mesi %>%
mutate(data_formattata = paste(anno, mese_testuale, sep = "-"))
View(varianza_mesi)
ggplot(varianza_mesi, aes(x = data_formattata, y = varianza)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Box Plot della Variabile",
y = "Valore della Variabile") +
theme_minimal()
View(varianza_mesi)
View(media_mesi)
merged_df <- merge(media_mesi, varianza_mesi, by = "data", all = TRUE)
View(merged_df)
ggplot(merged_df, aes( x = data_formattata,y = varianza)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
geom_hline(yintercept = media, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = 1, y = media + 0.5, label = paste("Media =", round(vendite_medie, 2)), color = "red") +
annotate("text", x = 1, y = media + 1.5, label = paste("Varianza =", round(varianza, 2)), color = "blue") +
labs(title = "Box Plot con Media e Varianza",
y = "Valore della Variabile") +
theme_minimal()
ggplot(merged_df, aes( x = data_formattata,y = varianza)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
geom_hline(yintercept = vendite_medie, color = "red", linetype = "dashed", size = 1) +
annotate("text", x = 1, y = vendite_medie + 0.5, label = paste("Media =", round(vendite_medie, 2)), color = "red") +
annotate("text", x = 1, y = vendite_medie + 1.5, label = paste("Varianza =", round(varianza, 2)), color = "blue") +
labs(title = "Box Plot con Media e Varianza",
y = "Valore della Variabile") +
theme_minimal()
dati_vendite <- merge(media_mesi, df2, by = "id", all = TRUE)
dati_vendite <- merge(media_mesi, varianza_mesi, by = "data", all = TRUE)
ggplot(dati_vendite, aes(x = data, y = vendite_medie)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
geom_hline(aes(yintercept = mean(vendite_medie)), color = "red", linetype = "dashed", size = 1) +
geom_errorbar(aes(ymin = vendite_medie - varianza, ymax = vendite_medie + varianza), width = 0.2, color = "blue") +
labs(title = "Box Plot delle Vendite Mensili con Media e Varianza",
x = "Mese",
y = "Vendite Medie") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(dati_vendite, aes(x = data, y = vendite_medie)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
geom_hline(aes(yintercept = mean(vendite_medie)), color = "red", linetype = "dashed", linewidth = 1) +
geom_errorbar(aes(ymin = vendite_medie - varianza, ymax = vendite_medie + varianza), width = 0.2, color = "blue") +
labs(title = "Box Plot delle Vendite Mensili con Media e Varianza",
x = "Mese",
y = "Vendite Medie") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(dati_vendite)
View(somma_mesi)
fatturato_per_anno <- aggregate(vendite_totali ~ anno, data = somma_mesi, sum)
View(fatturato_per_anno)
# Creazione del grafico a torta
ggplot(fatturato_per_anno, aes(x = "", y = introito, fill = as.factor(anno))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Somma degli Introiti per Anno",
fill = "Anno") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
View(fatturato_per_anno)
ggplot(fatturato_per_anno, aes(x = "", y = vendite_totali, fill = as.factor(anno))) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Fatturato per Anno",
fill = "Anno") +
theme_minimal() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
legend.position = "right")
View(mesi_min)
View(media_mesi)
media_generale <- mean(media_mesi$vendite_medie)
ggplot(media_mesi, aes(x = data_formattata, y = vendite_medie, group = 1)) + geom_line() + geom_point() + ggtitle("Medie per Mese") + geom_hline(yintercept = media_generale, color = "red", linetype = "dashed", size = 1) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(x = "Date", y = " Importo medio (€)")
View(mesi_max)
View(mesi_max)
View(mesi_max_importo)
View(mesi_max)
mesi_max$anno <- substr(mesi_max$data, 1, 4)
mesi_max$mese <- substr(mesi_max$data, 5, 6)
mesi_max <- mesi_max %>%
mutate(mese_testuale = nomi_mesi[as.numeric(mese)])
mesi_max <- mesi_max %>%
mutate(data_formattata = paste(anno, mese_testuale, sep = "-"))
View(mesi_max)
mesi_min$anno <- substr(mesi_min$data, 1, 4)
mesi_min$mese <- substr(mesi_min$data, 5, 6)
mesi_min <- mesi_min %>%
mutate(mese_testuale = nomi_mesi[as.numeric(mese)])
mesi_min <- mesi_min %>%
mutate(data_formattata = paste(anno, mese_testuale, sep = "-"))
ggplot(mesi_max, aes(x = data_formattata, y = vendite_totali)) + geom_bar(stat = "identity", fill = "green", position = position_dodge(width = 0.8)) + ggtitle("Miglior mese per anno") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(mesi_min, aes(x = data_formattata, y = vendite_totali)) + geom_bar(stat = "identity", fill = "red", position = position_dodge(width = 0.8)) + labs(title = "Peggior mese per anno",
x = "Data",
y = "Fatturato")  + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(yintercept = media_generale, color = "red", linetype = "dashed", size = 1)
View(somma_mesi)
media_generale <- mean(somma_mesi$vendite_totali)
ggplot(mesi_max, aes(x = data_formattata, y = vendite_totali)) + geom_bar(stat = "identity", fill = "green", position = position_dodge(width = 0.8)) + labs(title = "Miglior mese per anno",
x = "Data",
y = "Fatturato") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(yintercept = media_generale, color = "red", linetype = "dashed", size = 1)
ggplot(mesi_min, aes(x = data_formattata, y = vendite_totali)) + geom_bar(stat = "identity", fill = "blue", position = position_dodge(width = 0.8)) + labs(title = "Peggior mese per anno",
x = "Data",
y = "Fatturato")  + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + geom_hline(yintercept = media_generale, color = "red", linetype = "dashed", size = 1)
